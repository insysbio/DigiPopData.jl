var documenterSearchIndex = {"docs":
[{"location":"api/#DigiPopData.AbstractMetric","page":"API","title":"DigiPopData.AbstractMetric","text":"AbstractMetric\n\nAbstract super‑type for all metric descriptors used by DigiPopData.\n\nPurpose\n\nGroup together heterogeneous metrics (Mean, MeanSD, Category, …) so they can share the same dispatch points (mismatch, mismatch_expression, get_loss, ...).\n\nRequired interface\n\nmismatch: Function to calculate the loss for a given metric and simulated data as a value.\nmismatch_expression: Function to calculate the loss for a given metric and simulated data as an expression.\nvalidate: Function to validate the simulated data against the metric.\n\nThe parsing rules for the metric type are defined in the PARSERS dictionary to convert from DataFrame row to specific Metric struture. It is used in the parse_metric_bindings method.\n\nPARSERS[\"<metric_type>\"] = (row) -> begin\n    # parsing logic\nend\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.CategoryMetric","page":"API","title":"DigiPopData.CategoryMetric","text":"CategoryMetric <: AbstractMetric\n\nCategoryMetric is a metric descriptor for categorical data. It is based on polinomial distribution within the groups. \n\nFields\n\nsize::Int: The size of the dataset.\ngroups::Vector{String}: The names of the groups.\nrates::Vector{Float64}: The probabilities of each group.\ncov_inv::Matrix{Float64}: The inverse of the covariance matrix of the groups.\ngroup_active::Vector{Bool}: A boolean vector indicating which groups are active (non-zero rates).\n\nConstructor\n\nCategoryMetric(size::Int, groups::Vector{String}, rates::Vector{Float64}): Creates a new instance of CategoryMetric.  It validates the input data and calculates the inverse covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.MeanMetric","page":"API","title":"DigiPopData.MeanMetric","text":"MeanMetric <: AbstractMetric\n\nA metric that compares the mean of a simulated dataset to a target mean.\n\nFields\n\nsize::Int: The size of the dataset.\nmean::Float64: The target mean value.\nsd::Float64: The target standard deviation value.\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.MeanSDMetric","page":"API","title":"DigiPopData.MeanSDMetric","text":"MeanSDMetric <: AbstractMetric\n\nA metric that compares the mean and standard deviation (SD) of a simulated dataset to a target mean and SD.\n\nFields\n\nsize::Int: The size of the dataset.\nmean::Float64: The target mean value.\nsd::Float64: The target standard deviation value.\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.MetricBinding","page":"API","title":"DigiPopData.MetricBinding","text":"MetricBinding is container that binds a scenario, an endpoint and a concrete AbstractMetric description into a single unit that can be logged, displayed or passed to optimisation / validation routines.\n\nFields\n\nName Type Description\nid String Unique identifier of the binding\nscenario String Scenario (e.g. simulation arm) in which the metric is evaluated\nmetric AbstractMetric Metric implementation (MeanMetric, CategoryMetric, …)\nendpoint String Observable / model variable the metric is computed for\nactive Bool Whether the binding is enabled (true by default)\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.QuantileMetric","page":"API","title":"DigiPopData.QuantileMetric","text":"QuantileMetric <: AbstractMetric\n\nQuantileMetric is a metric descriptor for quantile data. It is based on the quantiles of the data and their corresponding values.\n\nFields\n\nsize::Int: The size of the dataset.\nlevels::Vector{Float64}: The quantile levels (e.g. 0.25, 0.5, 0.75).\nvalues::Vector{Float64}: The corresponding values for the quantile levels.\nskip_nan::Bool: If true, NaN values are allowed in simulated data and will be ignored. Iffalse`, NaN values are not allowed.\ncov_inv::Matrix{Float64}: The inverse of the covariance matrix of the groups.\ngroup_active::Vector{Bool}: A boolean vector indicating which groups are active (non-zero rates).\nrates::Vector{Float64}: The probabilities of each group.\n\nConstructor\n\nQuantileMetric(size::Int, levels::Vector{Float64}, values::Vector{Float64}; skip_nan::Bool = false): Creates a new instance of QuantileMetric.  It validates the input data and calculates the inverse covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.SurvivalMetric","page":"API","title":"DigiPopData.SurvivalMetric","text":"\"     SurvivalMetric <: AbstractMetric\n\nFields\n\nsize::Int: The size of the dataset.\nlevels::Vector{Float64}: The survival levels (e.g. 0.9, 0.8, 0.7).\nvalues::Vector{Float64}: The corresponding values for the survival levels.\ncov_inv::Matrix{Float64}: The inverse of the covariance matrix of the groups.\ngroup_active::Vector{Bool}: A boolean vector indicating which groups are active (non-zero rates).\nrates::Vector{Float64}: The probabilities of each group.\n\nConstructor\n\nSurvivalMetric(size::Int, levels::Vector{Float64}, values::Vector{Float64}): Creates a new instance of SurvivalMetric.  It validates the input data and calculates the inverse covariance matrix.\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.get_loss-Tuple{DataFrames.DataFrame, Vector{MetricBinding}}","page":"API","title":"DigiPopData.get_loss","text":"get_loss(simulated::DataFrame, metric_bindings::Vector{MetricBinding}) -> Float64\n\nCalculate the loss for a given set of metric bindings and a simulated DataFrame. The function iterates over the metric bindings, selecting the relevant data from the simulated DataFrame  based on the scenario and endpoint specified in each binding. It then computes the loss using the mismatch  function defined in the metric.\n\nArguments\n\nsimulated::DataFrame: A DataFrame containing the simulated data.\nmetric_bindings::Vector{MetricBinding}: A vector of MetricBinding objects, each containing a scenario,\n\nendpoint, and metric.\n\n\n\n\n\n","category":"method"},{"location":"api/#DigiPopData.mismatch-Tuple{AbstractVector{<:Real}, DigiPopData.AbstractMetric}","page":"API","title":"DigiPopData.mismatch","text":"mismatch(sim::AbstractVector{<:Real}, metric::AbstractMetric) -> Float64\n\nArguments\n\nsim::AbstractVector{<:Real}: A vector of simulated data.\nmetric::AbstractMetric: An instance of a metric descriptor (e.g., MeanMetric, CategoryMetric, etc.).\n\nReturn a loss that quantifies the mismatch between simulated data sim and the target metric metric.   The concrete formula depends on the subtype of AbstractMetric.\n\n\n\n\n\n","category":"method"},{"location":"api/#DigiPopData.mismatch_expression-Tuple{AbstractVector{<:Real}, DigiPopData.AbstractMetric, Vector{JuMP.VariableRef}, Int64}","page":"API","title":"DigiPopData.mismatch_expression","text":"mismatch_expression(sim::AbstractVector{<:Real}, metric::AbstractMetric, X::Vector{VariableRef}, X_len::Int) -> QuadExpr\n\nArguments\n\nsim::AbstractVector{<:Real}: A vector of simulated data.\nmetric::AbstractMetric: An instance of a metric descriptor (e.g., MeanMetric, CategoryMetric, etc.).\nX::Vector{VariableRef}: A vector of JuMP variable references.\nX_len::Int: The length of the vector of JuMP variable references.\n\nReturn an expression that quantifies the mismatch between simulated data sim and the target metric metric. The concrete formula depends on the subtype of AbstractMetric.\n\n\n\n\n\n","category":"method"},{"location":"api/#DigiPopData.parse_metric_bindings-Tuple{DataFrames.DataFrame}","page":"API","title":"DigiPopData.parse_metric_bindings","text":"parse_metric_bindings(df::DataFrame) -> Vector{MetricBinding}\n\nParse a DataFrame with metric‑binding definitions and return a vector of MetricBinding objects.\n\nThe DataFrame should contain the following columns:\n\nid: Unique identifier for the metric binding.\nscenario: The scenario to which the metric binding applies.\nendpoint: The observable (endpoint) associated with the metric binding.\nactive: (optional) A boolean indicating whether the metric binding is active (default is true).\nmetric.type: The type of metric (e.g., \"mean\", \"category\", etc.).\nmetric.<parameter>: Additional parameters for the metric, depending on its type.\n\nThe function uses the PARSERS dictionary to find the appropriate parser for the metric type. The function iterates over each row of the DataFrame, extracting the relevant information and creating a MetricBinding object.\n\n\n\n\n\n","category":"method"},{"location":"api/#DigiPopData.validate-Tuple{AbstractVector{<:Real}, DigiPopData.AbstractMetric}","page":"API","title":"DigiPopData.validate","text":"validate(sim::AbstractVector{<:Real}, metric::AbstractMetric)\n\nArguments\n\nsim::AbstractVector{<:Real}: A vector of simulated data.\nmetric::AbstractMetric: An instance of a metric descriptor (e.g., MeanMetric, CategoryMetric, etc.).\n\nValidate the simulated data sim against the target metric metric. It throws an error if the validation fails. The concrete validation rules depend on the subtype of AbstractMetric.\n\n\n\n\n\n","category":"method"},{"location":"#DigiPopData.jl","page":"Home","title":"DigiPopData.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Data prep and visualization tools for Virtual Patient QSP modeling","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DigiPopData.jl is a Julia package designed to facilitate the preparation and visualization of data for Virtual Patient QSP (Quantitative Systems Pharmacology) modeling. It provides a set of tools and functions to streamline the process of data handling, making it easier for researchers and practitioners in the field of pharmacometrics and systems biology.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package provides the unified table format for the real population data, divided to different metrics types. The data can be loaded from DataFrame or CSV file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It also expect the specific format for the virtual population data, which is a DataFrame.","category":"page"},{"location":"#Implemented-metrics","page":"Home","title":"Implemented metrics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each metric compare real and virtual populations base on the following statistics:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia struct metric.type in DataFrame Bin optimization Description\nMeanMetric mean + Compare the mean.\nMeanSDMetric mean_sd + Compare the mean and standard deviation.\nCategoryMetric category + Compare the categorical distribution.\nQuantileMetric quantile + Compare the quantile values.\nSurvivalMetric survival + Compare the survival curves.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2025 InSysBio CY","category":"page"}]
}
