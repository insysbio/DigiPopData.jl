var documenterSearchIndex = {"docs":
[{"location":"api/#DigiPopData.MetricBinding","page":"API","title":"DigiPopData.MetricBinding","text":"MetricBinding(\n    id::String,\n    scenario::String,\n    metric::AbstractMetric,\n    endpoint::String,\n    active::Bool\n)\n\nStructure which is container that binds a scenario, an endpoint and a concrete AbstractMetric description into a single unit that can be logged, displayed or passed to optimisation / validation routines.\n\nFields\n\nName Type Description\nid String Unique identifier of the binding\nscenario String Scenario (e.g. simulation arm) in which the metric is evaluated\nmetric AbstractMetric Metric implementation (MeanMetric, CategoryMetric, …)\nendpoint String Observable / model variable the metric is computed for\nactive Bool Whether the binding is enabled (true by default)\n\nReturns\n\nMetricBinding\n\n\n\n\n\n","category":"type"},{"location":"api/#DigiPopData.get_loss-Tuple{DataFrames.DataFrame, Vector{MetricBinding}}","page":"API","title":"DigiPopData.get_loss","text":"get_loss(simulated::DataFrame, metric_bindings::Vector{MetricBinding})\n\nCalculate the loss for a given set of metric bindings and a simulated DataFrame. The function iterates over the metric bindings, selecting the relevant data from the simulated DataFrame  based on the scenario and endpoint specified in each binding. It then computes the loss using the mismatch  function defined in the metric.\n\nArguments\n\nsimulated::DataFrame: A DataFrame containing the simulated data.\nmetric_bindings::Vector{MetricBinding}: A vector of MetricBinding objects, each containing a scenario,\n\nendpoint, and metric.\n\nReturns\n\nloss::Float64: The total loss calculated as the sum of the individual losses from each metric binding.\n\n\n\n\n\n","category":"method"},{"location":"api/#DigiPopData.parse_metric_bindings-Tuple{DataFrames.DataFrame}","page":"API","title":"DigiPopData.parse_metric_bindings","text":"parse_metric_bindings(df::DataFrame)\n\nParse a DataFrame with metric‑binding definitions and return a vector of MetricBinding objects.\n\nThe DataFrame should contain the following columns:\n\nid: Unique identifier for the metric binding.\nscenario: The scenario to which the metric binding applies.\nendpoint: The observable (endpoint) associated with the metric binding.\nmetric.type: The type of metric (e.g., \"mean\", \"category\", etc.).\nactive: (optional) A boolean indicating whether the metric binding is active (default is true).\n\nThe function uses the PARSERS dictionary to find the appropriate parser for the metric type. The function iterates over each row of the DataFrame, extracting the relevant information and creating a MetricBinding object.\n\nReturns\n\nVector{MetricBinding}\n\n\n\n\n\n","category":"method"},{"location":"#DigiPopData.jl","page":"Home","title":"DigiPopData.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Data prep and visualization tools for Virtual Patient QSP modeling","category":"page"}]
}
